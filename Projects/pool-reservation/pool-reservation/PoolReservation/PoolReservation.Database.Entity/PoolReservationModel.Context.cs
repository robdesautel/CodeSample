//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PoolReservation.Database.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PoolReservationEntities : DbContext
    {
        public PoolReservationEntities()
            : base("name=PoolReservationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Calendar> Calendar { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<SitePermissions> SitePermissions { get; set; }
        public virtual DbSet<VenueTypes> VenueTypes { get; set; }
        public virtual DbSet<HotelUsers> HotelUsers { get; set; }
        public virtual DbSet<ReservationTransaction> ReservationTransaction { get; set; }
        public virtual DbSet<TransactionsForReservations> TransactionsForReservations { get; set; }
        public virtual DbSet<TransactionType> TransactionType { get; set; }
        public virtual DbSet<ItemTypes> ItemTypes { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounter { get; set; }
        public virtual DbSet<Counter> Counter { get; set; }
        public virtual DbSet<Hash> Hash { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<JobParameter> JobParameter { get; set; }
        public virtual DbSet<JobQueue> JobQueue { get; set; }
        public virtual DbSet<List> List { get; set; }
        public virtual DbSet<Schema> Schema { get; set; }
        public virtual DbSet<Server> Server { get; set; }
        public virtual DbSet<Set> Set { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Hotels> Hotels { get; set; }
        public virtual DbSet<VenueItems> VenueItems { get; set; }
        public virtual DbSet<PictureResolutions> PictureResolutions { get; set; }
        public virtual DbSet<Pictures> Pictures { get; set; }
        public virtual DbSet<PictureUrls> PictureUrls { get; set; }
        public virtual DbSet<HotelPermissions> HotelPermissions { get; set; }
        public virtual DbSet<HotelMiscellaneousTable> HotelMiscellaneousTable { get; set; }
        public virtual DbSet<MiscellaneousHtmlTable> MiscellaneousHtmlTable { get; set; }
        public virtual DbSet<TermsAndConditions> TermsAndConditions { get; set; }
        public virtual DbSet<VenueItemWithQuantity> VenueItemWithQuantity { get; set; }
        public virtual DbSet<VenueItemQuantity> VenueItemQuantity { get; set; }
        public virtual DbSet<ReserveItems> ReserveItems { get; set; }
        public virtual DbSet<TransactionPaymentDetails> TransactionPaymentDetails { get; set; }
        public virtual DbSet<TransactionStripeDetails> TransactionStripeDetails { get; set; }
        public virtual DbSet<TransactionStatus> TransactionStatus { get; set; }
        public virtual DbSet<ReservationGroup> ReservationGroup { get; set; }
        public virtual DbSet<ReservationGroupStatus> ReservationGroupStatus { get; set; }
        public virtual DbSet<InboxMessages> InboxMessages { get; set; }
        public virtual DbSet<PrivacyPolicy> PrivacyPolicy { get; set; }
        public virtual DbSet<Icons> Icons { get; set; }
        public virtual DbSet<Venues> Venues { get; set; }
    
        public virtual int CancelProcessing(Nullable<int> resId)
        {
            var resIdParameter = resId.HasValue ?
                new ObjectParameter("resId", resId) :
                new ObjectParameter("resId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CancelProcessing", resIdParameter);
        }
    
        public virtual int ChangeProcessingStatusToPending(Nullable<int> resId)
        {
            var resIdParameter = resId.HasValue ?
                new ObjectParameter("resId", resId) :
                new ObjectParameter("resId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeProcessingStatusToPending", resIdParameter);
        }
    
        public virtual int DeletePendingReservation(Nullable<int> resId)
        {
            var resIdParameter = resId.HasValue ?
                new ObjectParameter("resId", resId) :
                new ObjectParameter("resId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePendingReservation", resIdParameter);
        }
    
        public virtual ObjectResult<PrepareAndGetReservationForProcessing_Result> PrepareAndGetReservationForProcessing(Nullable<int> resId)
        {
            var resIdParameter = resId.HasValue ?
                new ObjectParameter("resId", resId) :
                new ObjectParameter("resId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrepareAndGetReservationForProcessing_Result>("PrepareAndGetReservationForProcessing", resIdParameter);
        }
    
        public virtual int UpdateStatusDate(Nullable<int> resId)
        {
            var resIdParameter = resId.HasValue ?
                new ObjectParameter("resId", resId) :
                new ObjectParameter("resId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStatusDate", resIdParameter);
        }
    }
}
